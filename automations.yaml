# Update group.sonos_all upon HA start and change in Sonos speaker group
- id: openhasp_sonos_change_sonos_active_group_speakers
  alias: openHASP Sonos change active group speakers
  mode: restart
  trigger:
  - platform: state
    entity_id: sensor.sonos_active_group_speakers
  - platform: homeassistant
    event: start
  action:
  - service: group.set
    data_template:
      object_id: sonos_all
      entities: "{{ state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'group_members') | join(',') }}"


# Populate group.sonos_all_speakers upon HA start and change in available speakers
# entity_id[0] copied from group.sonos_all as master speaker. Remaining entities from dynamic speaker sensor
- id: openhasp_sonos_change_available_slave_speakers_group
  alias: openHASP Sonos change available slave speakers group
  trigger:
  - platform: state
    entity_id: sensor.sonos_available_slave_speakers
  - platform: homeassistant
    event: start
  action:
  - service: group.set
    data_template:
      object_id: sonos_all_speakers
      entities: "{{ state_attr('group.sonos_all', 'entity_id')[0] }},{{ states('sensor.sonos_available_slave_speakers') }}"


# Using group commands to push updates to ALL plates !
# Remember plates have to share same object mapping (page/object number)
# Push changes on media_title- or sonos_active_speakers sensors to plate objects
- id: openhasp_sonos_push_artist_title
  alias: openHASP Sonos push artist title
  mode: queued
  trigger:
    platform: state
    entity_id:
    - sensor.media_title
    - sensor.sonos_active_speakers
  action:
  - service: mqtt.publish
    data_template:
      payload: '{{ states(trigger.entity_id) }}'
      topic: >
        {% if (trigger.entity_id) == 'sensor.media_title' %}
          hasp/plates/command/p2b14.text
        {% else %}
          hasp/plates/command/p2b26.text
        {% endif %}


# Push media_artist/media_album_name to plate
# If media_title if not equal to media_album_name and media_album_name exists then add album name to artist string
- id: openhasp_push_media_artist_media_album_name_to_plate
  alias: openHASP push media artist/media album name to plate
  mode: restart
  trigger:
    platform: state
    entity_id:
    - sensor.media_artist
    - sensor.media_album_name
  action:
  - service: mqtt.publish
    data_template:
      topic: hasp/plates/command/p2b15.text
      payload: >
        {% if is_state('sensor.media_album_name', '--- No album name ---') or states('sensor.media_title') == states('sensor.media_album_name') %}
          {{ states('sensor.media_artist') }}
        {% else %}  
          {{ states('sensor.media_artist') }} {{"â€¢"|e}} {{ states('sensor.media_album_name') }}
        {% endif %}


# Upon change, push media source + state to plate(s) in separate pop-up window for 5 seconds
- id: openhasp_sonos_push_source_media
  alias: openHASP Sonos push source media
  mode: restart
  trigger:
    platform: state
    # Dynamic entity_id trigger - Sonos master speaker state 
    entity_id: sensor.hasp_sonos_master_state
    # Need 'to: "xxx"' in order to filter out attribute changes. Only checking for playing/paused state changes.
    to:
      - "playing"
      - "paused"
  condition:  # Filter out 'unavailable' before pushing change to plate (only pushing when media player has data ready)
    condition: and
    conditions:
      - condition: template
        value_template: "{{ states('sensor.media_source') != 'unavailable' }}"
  action:
    # Dynamic positioning of the pop up window
  - service: mqtt.publish
    data:
      topic: hasp/plates/command
      payload: >-
        {% if states('sensor.media_source') != 'no source' and state_attr(states('sensor.hasp_sonos_devices'), 'tftWidth') == 480 %}
          {"obj":"label","id":90,"hidden":0,"page":2,"x":45,"y":170,"w":220,"bg_color":"#000000","border_color":"#FFAC00","border_width":2,"radius":10,"radius1":10,"radius2":10,"align":"center","mode":"break","text_color":"#FFAC00","text_font":32,"text":"{{ 'TuneIn\n' if state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'media_content_id') is search('tunein', ignorecase=True) else 'Source\n' }}{{state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'media_channel')}}\n{{states('sensor.hasp_sonos_master_state')}}"}
        {% elif states('sensor.media_source') != 'no source' and state_attr(states('sensor.hasp_sonos_devices'), 'tftWidth') == 320 %} 
          {"obj":"label","id":90,"hidden":0,"page":2,"x":10,"y":145,"w":188,"bg_color":"#000000","border_color":"#FFAC00","border_width":2,"radius":10,"radius1":10,"radius2":10,"align":"center","mode":"break","text_color":"#FFAC00","text_font":32,"text":"{{ 'TuneIn\n' if state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'media_content_id') is search('tunein', ignorecase=True) else 'Source\n' }}{{state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'media_channel')}}\n{{states('sensor.hasp_sonos_master_state')}}"}
        {% elif states('sensor.media_source') != 'no source' and state_attr(states('sensor.hasp_sonos_devices'), 'tftWidth') == 800 %} 
          {"obj":"label","id":90,"hidden":0,"page":2,"x":40,"y":145,"w":275,"pad_bottom":8,"bg_color":"#000000","border_color":"#FFAC00","border_width":2,"radius":10,"radius1":10,"radius2":10,"align":"center","mode":"break","text_color":"#FFAC00","text_font":32,"text":"{{ 'TuneIn\n' if state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'media_content_id') is search('tunein', ignorecase=True) else 'Source\n' }}#FFFFFF {{state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'media_channel')}}\n{{states('sensor.hasp_sonos_master_state')}}"}
        {% elif state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'media_playlist') != None and state_attr(states('sensor.hasp_sonos_devices'), 'tftWidth') == 480  %}
          {"obj":"label","id":90,"hidden":0,"page":2,"x":45,"y":170,"w":220,"align":"center","border_color":"#FFAC00","border_width":2,"radius":10,"radius1":10,"radius2":10,"mode":"break","text_color":"#FFAC00","text_font":32,"text":"{{ 'Spotify playlist\n' if state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'media_content_id') is search('spotify', ignorecase=True) else 'Unknown playlist\n' }}{{state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'media_playlist')}}\n{{states('sensor.hasp_sonos_master_state')}}"}
        {% elif state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'media_playlist') != None and state_attr(states('sensor.hasp_sonos_devices'), 'tftWidth') == 320  %} 
          {"obj":"label","id":90,"hidden":0,"page":2,"x":10,"y":160,"w":188,"align":"center","border_color":"#FFAC00","border_width":2,"radius":10,"radius1":10,"radius2":10,"mode":"break","text_color":"#FFAC00","text_font":28,"text":"{{ 'Spotify playlist\n' if state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'media_content_id') is search('spotify', ignorecase=True) else 'Unknown playlist\n' }}{{state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'media_playlist')}}\n{{states('sensor.hasp_sonos_master_state')}}"}
        {% elif state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'media_playlist') != None and state_attr(states('sensor.hasp_sonos_devices'), 'tftWidth') == 800  %}
          {"obj":"label","id":90,"hidden":0,"page":2,"x":40,"y":145,"w":275,"align":"center","border_color":"#FFAC00","pad_bottom":8,"border_width":2,"radius":10,"radius1":10,"radius2":10,"mode":"break","text_color":"#FFFFFF","text_font":32,"text":"{{ '#FFAC00 Spotify playlist\n' if state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'media_content_id') is search('spotify', ignorecase=True) else 'Unknown playlist\n' }}{{state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'media_playlist')}}\n#FFAC00 {{states('sensor.hasp_sonos_master_state')}}"}
        {% elif state_attr(states('sensor.hasp_sonos_devices'), 'tftWidth') == 480 %}
          {"obj":"label","id":90,"hidden":0,"page":2,"x":45,"y":170,"w":220,"align":"center","border_color":"#FFAC00","border_width":2,"radius":10,"radius1":10,"radius2":10,"mode":"break","text_color":"#FFAC00","text_font":32,"text":"{{ 'Spotify song\n' if state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'media_content_id') is search('spotify', ignorecase=True) else 'Unknown playlist\n' }}{{states('sensor.hasp_sonos_master_state')}}"}
        {% elif state_attr(states('sensor.hasp_sonos_devices'), 'tftWidth') == 320 %}
          {"obj":"label","id":90,"hidden":0,"page":2,"x":10,"y":177,"w":188,"align":"center","border_color":"#FFAC00","border_width":2,"radius":10,"radius1":10,"radius2":10,"mode":"break","text_color":"#FFAC00","text_font":28,"text":"{{ 'Spotify song\n' if state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'media_content_id') is search('spotify', ignorecase=True) else 'Unknown playlist\n' }}{{states('sensor.hasp_sonos_master_state')}}"}
        {% elif state_attr(states('sensor.hasp_sonos_devices'), 'tftWidth') == 800 %}
          {"obj":"label","id":90,"hidden":0,"page":2,"x":40,"y":170,"w":275,"align":"center","pad_bottom":8,"border_color":"#FFAC00","border_width":2,"radius":10,"radius1":10,"radius2":10,"mode":"break","text_color":"#FFAC00","text_font":28,"text":"{{ 'Spotify song\n' if state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'media_content_id') is search('spotify', ignorecase=True) else 'Unknown playlist\n' }}{{states('sensor.hasp_sonos_master_state')}}"}
        {% else %}  
           {"obj":"label","id":90,"hidden":0,"page":2,"x":45,"y":170,"w":220,"align":"center","border_color":"#FFAC00","border_width":2,"radius":10,"radius1":10,"radius2":10,"mode":"break","text_color":"#FFAC00","text_font":32,"text":"{{ 'Spotify song\n' if state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'media_content_id') is search('spotify', ignorecase=True) else 'Unknown playlist\n' }}{{states('sensor.hasp_sonos_master_state')}}"}
        {% endif %}
  - delay:
      seconds: 5
  - service: mqtt.publish
    data:
      topic: hasp/plates/command
      payload: >-
        {"page":2,"id":90,"hidden":1}


- id: openhasp_push_sonos_volume_muted
  alias: openHASP push Sonos volume muted
  mode: single
  trigger:
    - platform: state
      entity_id: binary_sensor.sonos_volume_muted
    - platform: homeassistant
      event: start
    - platform: state
      # Enter all used openHASP plates entity_id's here 
      entity_id:
        #- openhasp.wt32_01
        #- openhasp.wt32_02
        - openhasp.t3e_02
      from: unavailable
  action:
  - service: mqtt.publish
    data_template:
      topic: hasp/plates/command/jsonl
      payload: >
        {% if is_state('binary_sensor.sonos_volume_muted', 'on') %}
          {"page":2,"id":24,"val":1,"text":"\ue75f"}
        {% else %}
          {"page":2,"id":24,"val":0,"text":"\ue57e"}
        {% endif %}


- id: openhasp_push_sonos_shuffle
  alias: openHASP push Sonos shuffle
  mode: single
  trigger:
    - platform: state
      entity_id: binary_sensor.sonos_shuffle
    - platform: homeassistant
      event: start
    - platform: state
      # Enter all used openHASP plates entity_id's here 
      entity_id:
      #- openhasp.wt32_01
      #- openhasp.wt32_02
      - openhasp.t3e_02
      from:
      - unavailable
  action:
  - service: mqtt.publish
    data_template:
      topic: hasp/plates/command/jsonl
      payload: >
        {% if is_state('binary_sensor.sonos_shuffle', 'on') %}
          {"page":2,"id":25,"val":1,"text_color1":"#FFAC00","text":"\ue49d"}
        {% else %}
          {"page":2,"id":25,"val":0,"text_color":"#C7BAA7","text":"\ue49e"}
        {% endif %}


- id: openhasp_push_sonos_repeat
  alias: openHASP push Sonos repeat
  mode: single
  trigger:
    - platform: state
      entity_id: sensor.sonos_repeat
    - platform: homeassistant
      event: start
    - platform: state
      # Enter all used openHASP plates entity_id's here 
      entity_id:
      #- openhasp.wt32_01
      #- openhasp.wt32_02
      - openhasp.t3e_02
      from:
      - unavailable
  action:
  - service: mqtt.publish
    data_template:
      topic: hasp/plates/command/jsonl
      payload: >
        {% if is_state('sensor.sonos_repeat', 'one') %}
          {"page":2,"id":27,"text_color":"#FFAC00","text":"\ue458"}
        {% elif is_state('sensor.sonos_repeat', 'all') %}
          {"page":2,"id":27,"text_color":"#FFAC00","text":"\ue456"}
        {% else %}
          {"page":2,"id":27,"text_color":"#C7BAA7","text":"\ue457"}
        {% endif %}


# Hide/show progress bar & enable/disable shuffle & repeat buttons when shifting from/to playlist as source
# Wait one second before proceeding (HA's media entities can 'flicker' a bit upon change)
# Only trigger on state changes to/from 0 on entity's media_duration. This is always 0 when non playlists are selected.
- id: openhasp_sonos_hide_progress_bar
  alias: openHASP Sonos hide progress bar
  mode: restart
  trigger:
    - platform: state
      entity_id: sensor.hasp_sonos_media_duration
      to: '0'
      for:
        seconds: 1
    - platform: state
      entity_id: sensor.hasp_sonos_media_duration
      from: '0'
  action:
  - service: mqtt.publish
    data_template:
      topic: hasp/plates/command/jsonl
      payload_template: >
        {% if trigger.to_state.state == '0' %}
          {'page':2,'id':41,'hidden':1}{'page':2,'id':25,'enabled':0}{'page':2,'id':27,'enabled':0}
        {% else %}
          {'page':2,'id':41,'hidden':0}{'page':2,'id':25,'enabled':1}{'page':2,'id':27,'enabled':1}
        {% endif %}


# Listen for changes from ALL plates (+ in topic)  !
# Remember plates have to share same object mapping (page/object number)
# Push volume value string setting immediately to all plates
# Push volume setting from hasp to media_player_group
# Plates are using a Bezier algorithm in order to adjust volume at low levels much easier that if using a linear slider
# https://community.home-assistant.io/t/smooth-media-player-volume-fade-with-multiple-curve-functions/349950
- id: openhasp_sonos_volume_receive_from_plates
  alias: openHASP Sonos volume - receive from plates
  mode: restart
  trigger:
    platform: mqtt
    topic: hasp/+/state/p2b20
  action:
  - service: media_player.volume_set
    data_template:
      entity_id:
      - group.sonos_all
      volume_level: '{{ trigger.payload_json.val | float / 100 / (1 + (1 - trigger.payload_json.val | float / 100 )) }}'


# Push Sonos volume to plates as 'converted' values. Both val and value_str are pushed
# Plates are using a Bezier algorithm in order to adjust volume at low levels much easier that if using a linear slider
# https://community.home-assistant.io/t/smooth-media-player-volume-fade-with-multiple-curve-functions/349950
- id: openhasp_sonos_volume_push_to_plates
  alias: openHASP Sonos volume - push to plates
  mode: restart
  trigger:
    platform: state
    entity_id: sensor.sonos_volume
  condition:
    condition: template
    value_template: "{{ now().timestamp() - as_timestamp(states.sensor.hasp_volume.last_changed) > 1 }}"
  # Set offset for volume setting within the volume slider
  # Specific values needed, depending on slider width
  # 320 pixel width devices: -98 & 98
  # 480/800 pixel width devices: -170 & 170
  # sensor.sonos_volume = 60 equals value 75 on volume slider
  # Here we push sensor.sonos_volume (trigger.to_state_state)
  # Revised 20230213: Dynamic, individual value_ofs_x pushed to each plate
  action:
  - repeat:
      for_each: >
        {{ state_attr("group.hasp_sonos_devices", "entity_id") | list }}
      sequence:
        - variables:
            w: "{{ state_attr((repeat.item), 'tftWidth') }}"
        - service: mqtt.publish
          data:
            topic: "hasp/{{ state_attr((repeat.item), 'node') }}/command/p2b20.value_ofs_x"
            payload: >
              {% if trigger.to_state.state | int > 60 and (w == 480 or w == 800) %}
                -170
              {% elif trigger.to_state.state | int > 60 and w == 320 %}
                -98
              {% elif trigger.to_state.state | int <= 60 and (w == 480 or w == 800) %}
                170
              {% else %}
                98
              {% endif %}
  - variables:
      vol: "{{ ((trigger.to_state.state | int * 2) / (1 + (trigger.to_state.state | int / 100))) | int }}"
  - service: mqtt.publish
    data:
      topic: hasp/plates/command/jsonl
      payload: >
        {"page":2,"id":20,"val":{{ vol }}}{"page":2,"id":20,"value_str":{{ vol }}}


# Push volume slider value to all plates upon slider release
# Value pushed and shared is from the active plates operating slider - NOT HA's volume sensors state value
# value_str is not updated on the other plates. Only upon local slider changes. So we have to update value_str as well
# Revised 20230213: Dynamic, individual value_ofs_x pushed to each plate
- id: openhasp_sonos_push_volume_slider_value_to_all_plates
  alias: openHASP Sonos push volume slider value to all plates
  mode: restart
  trigger:
    - platform: mqtt
      topic: hasp/+/state/p2b20
  condition:
    - condition: template
      value_template: "{{ trigger.payload_json.event == 'up' }}"
  # Set offset for volume setting within the volume slider
  # Specific values needed, depending on slider width
  # 320 pixel width devices: -98 & 98
  # 480/800 pixel width devices: -170 & 170
  # sensor.sonos_volume = 60 equals value 75 on volume slider
  # Here we directly push slider value from plate (trigger.payload_json_val)
  action:
  - repeat:
      for_each: >
        {{ state_attr("group.hasp_sonos_devices", "entity_id") | list }}
      sequence:
        - variables:
            w: "{{ state_attr((repeat.item), 'tftWidth') }}"
        - service: mqtt.publish
          data:
            topic: "hasp/{{ state_attr((repeat.item), 'node') }}/command/p2b20.value_ofs_x"
            payload: >
              {% if trigger.payload_json.val | int > 75 and (w == 480 or w == 800) %}
                -170
              {% elif trigger.payload_json.val | int > 75 and w == 320 %}
                -98
              {% elif trigger.payload_json.val | int <= 75 and (w == 480 or w == 800) %}
                170
              {% else %}
                98
              {% endif %}
  - service: mqtt.publish
    data:
      topic: hasp/plates/command/jsonl
      payload: >
        {"page":2,"id":20,"val":{{ trigger.payload_json.val }}}{"page":2,"id":20,"value_str":{{ trigger.payload_json.val }}}


# Listen for changes from ALL plates (+ in topic)  !
# Remember plates have to share same object mapping (page/object number)
# More simple 'media_player.media_play_pause' service can't be used, as HA Sonos integration has 'issues/bugs' with this service, using specific slave speaker configurations
# Should be retested when Sonos integration has been updated
- id: openhasp_sonos_play_toggle
  alias: openHASP Sonos play toggle
  mode: single
  trigger:
    - platform: mqtt
      topic: hasp/+/state/p2b17
  condition:
    - condition: template
      value_template: "{{ trigger.payload_json.event == 'down' }}"
  action:
    service_template: >-
      {% if trigger.payload_json.val == 1 %}
        media_player.media_pause
      {% elif trigger.payload_json.val == 0 %}
        media_player.media_play
      {% else %}
        media_player.media_stop
      {% endif %}
    data:
      entity_id:
      - group.sonos_all


# Push available slave speakers to plate with updated status (red or green)
# Press slave speaker button to toggle speakers join/unjoin status
# On 320 & 480 width devices, choose Sources or Playlists from tab and press 'arrow down' to end and close tab
# 050223: Revised trigger from plate objects to slave speakers group/all available speakers entity_id change
# 050223: Added update to primary speaker object (p2b89)
- id: openhasp_sonos_slave_speakers_to_plate
  alias: openHASP Sonos slave speakers to plate
  mode: restart
  trigger:
    - platform: state
      entity_id:
      - group.sonos_all
      - group.sonos_all_speakers
      attribute: entity_id
  action:
    - service: mqtt.publish
      data:
        topic: hasp/plates/command/jsonl
        payload_template: >
          {"page":2,"id":89,"text":"{{ state_attr(state_attr('group.sonos_all_speakers', 'entity_id')[0], 'friendly_name') }}"}
    - service: mqtt.publish
      data:
        topic: hasp/plates/command/jsonl
        payload_template: >
          {"page":2,"id":93,"options":{% set ns=namespace(counter="") %}{% for sources in state_attr('group.sonos_all_speakers', 'entity_id')[1:] %}{% set friendly = "#008000 " + state_attr((sources), 'friendly_name') + '#' if sources in state_attr('group.sonos_all', 'entity_id') else "#FF0000 " + state_attr((sources), 'friendly_name') + '#' %}{% set ns.counter = ns.counter + '\"'+ friendly +'"' %}{% if not loop.last %}{% set ns.counter = ns.counter + ',' + '"\\n"' + ',' %}{% endif %}{% endfor %}[{{ns.counter}}]}
 

- id: openhasp_sonos_slave_speakers_unjoin
  alias: openHASP Sonos slave speakers unjoin
  mode: queued
  trigger:
    platform: mqtt
    topic: hasp/+/state/p2b93
  condition:
    condition: and
    conditions:
    - condition: template
      value_template: >
        {% set val = trigger.payload_json.val | int(0) %}
        {% set entity = state_attr('group.sonos_all_speakers', 'entity_id')[1:] %}
        {{ 'true' if entity[val] in state_attr('group.sonos_all', 'entity_id') else 'false' }}
    - condition: template
      value_template: "{{ trigger.payload_json.event == 'down' }}"
  action:
    - service: media_player.unjoin
      data:
        entity_id: >-
          {% set entity = state_attr('group.sonos_all_speakers', 'entity_id')[1:] %}
          {% set val = trigger.payload_json.val | int(0) %}
          {{ entity[val] }}


# Now uses sensor.sonos_volume which is the correct master speaker / HA volume
# Join speakers one by one from toggle button on plate
# Set mute status and volume to match master speaker BEFORE joining speaker !
- id: openhasp_sonos_slave_speakers_join
  alias: openHASP Sonos slave speakers join
  mode: queued
  trigger:
    platform: mqtt
    topic: hasp/+/state/p2b93
  condition:
    condition: and
    conditions:
    - condition: template
      value_template: >
        {% set val = trigger.payload_json.val | int(0) %}
        {% set entity = state_attr('group.sonos_all_speakers', 'entity_id')[1:] %}
        {{ 'true' if entity[val] not in state_attr('group.sonos_all', 'entity_id') else 'false' }}
    - condition: template
      value_template: "{{ trigger.payload_json.event == 'down' }}"
  action: 
    - service: media_player.volume_mute
      data:
        entity_id: >-
          {% set entity = state_attr('group.sonos_all_speakers', 'entity_id')[1:] %}
          {% set val = trigger.payload_json.val | int(0) %}
          {{ entity[val] }} 
        is_volume_muted: "{{ true if state_attr((state_attr('group.sonos_all', 'entity_id')[0]),'is_volume_muted') else false }}"
    - service: media_player.volume_set
      data_template:
        entity_id: >-
          {% set entity = state_attr('group.sonos_all_speakers', 'entity_id')[1:] %}
          {% set val = trigger.payload_json.val | int(0) %}
          {{ entity[val] }} 
        volume_level: "{{ states.sensor.sonos_volume.state | float / 100}}"  
    - service: media_player.join
      data:
        entity_id: "{{ state_attr('group.sonos_all', 'entity_id')[0] }}"
        group_members: >-
          {% set entity = state_attr('group.sonos_all_speakers', 'entity_id')[1:] %}
          {% set val = trigger.payload_json.val | int(0) %}
          {{ entity[val] }} 


- id: openhasp_sonos_change_master_speaker_btnmtrx
  alias: openHASP Sonos change master speaker btnmtrx
  mode: single
  trigger:
  - platform: mqtt
    topic: hasp/+/state/p2b89
  - platform: mqtt
    topic: hasp/+/state/p2b95
  # Check for either Sunton 7" device master speaker button 'hold' action or
  # tab menu 'Master' value (object p2b95) on all other devices
  condition:
    condition: template
    value_template: "{{ trigger.payload_json.event == 'hold' or (trigger.payload_json.val == 3 and trigger.topic.split('/')[-1] == 'p2b95') }}"
  # Create option list for master speaker button matrix
  # Skip first entity_id in group.sonos_all_speakers as this entry is always current master speaker
  variables:
    sas: >
      {% set ns=namespace(counter="") %}
        {% for sources in state_attr("group.sonos_all_speakers", "entity_id")[1:] %}
          {% set friendly = "#0000FF " + state_attr((sources), "friendly_name") + "#" if sources in state_attr("group.sonos_all_speakers", "entity_id") else "#FF0000 " + state_attr((sources), "friendly_name") + "#" %}
          {% set ns.counter = ns.counter + '\"'+ friendly +'"' %}
            {% if not loop.last %}
              {% set ns.counter = ns.counter + "," + '"\\n"' + "," %}
            {% endif %}
        {% endfor %}
      {{ ns.counter }}
  action:
  - service: mqtt.publish
    data:
      topic: "hasp/{{trigger.topic.split('/')[1]}}/command/jsonl"
      payload: >
        {% if state_attr(("openhasp." + trigger.topic.split('/')[1]), "tftWidth") == 800 %}
          {"page":2,"id":93,"hidden":1}{"page":2,"id":88,"hidden":0,"options":[{{sas}},"\n","#FFFFFF E X I T#"]}
        {% else %}
          {"page":2,"id":88,"hidden":0,"options":[{{sas}}]}
        {% endif %}


- id: openhasp_sonos_choose_new_master_speaker_group
  alias: openHASP Sonos choose new master speaker group
  mode: single
  trigger:
  - platform: mqtt
    topic: hasp/+/state/p2b88
  condition:
    condition: template
    value_template: "{{ trigger.payload_json.event == 'down' }}"
  # Store chosen speaker in variable
  # Skip entity_id[0] in search = current master speaker (not included in button matrix)
  variables:
    # Store chosen speaker in variable. Data will be lost before automation has finished
    # Skip entity_id[0] in search = current master speaker (not included in button matrix)
    cs: >
      {{ state_attr('group.sonos_all_speakers','entity_id')[trigger.payload_json.val + 1] }}
    # Check if chosen speaker already is part of existing group and store it
    # Data will be lost before automation has finished
    in_group: >
      {% set ns = namespace(ig = "not_in_group") %}
        {% for entity_id in state_attr("group.sonos_all", "entity_id") %}
          {% if entity_id == cs %}
            {% set ns.ig = entity_id %}
          {% endif %}
        {% endfor %}
      {{ true if ns.ig != "not_in_group" else false }}
  action:
  # If device is a 5 or 7" Sunton, then hide master speaker button matrix and unhide slave speaker button matrix
  # Any other devices just 'emulate' an 'arrow up' press in a dropdown menu and exit tab menu completely
  - service: mqtt.publish
    data:
      topic: "hasp/{{trigger.topic.split('/')[1]}}/command/jsonl"
      payload: >
        {% if state_attr(("openhasp." + trigger.topic.split('/')[1]), "tftWidth") == 800 %}
          {"page":2,"id":88,"hidden":1}{"page":2,"id":93,"hidden":0}
        {% else %}
          {'page':2,'id':95,'to_back':1,'hidden':1}{'page':2,'id':23,'hidden':1}{'page':2,'id':26,'hidden':1}{'page':2,'id':22,'hidden':0}{'page':2,'id':15,'hidden':0}
        {% endif %}
  # Choose new chosen master speaker (group)
  - service: group.set
    data_template:
      object_id: sonos_all
      entities: >
        {{ state_attr("group.sonos_all_speakers","entity_id")[trigger.payload_json.val + 1]}}
  # If chosen speaker is not 'E X I T' and chosen speaker already is part of existing group
  # then unjoin speaker from current group 
  - if:
    - condition: template
      value_template: >
        {{ in_group and trigger.payload_json.text != "E X I T" }}
    then:
    - service: media_player.unjoin
      data_template:
        entity_id: "{{ cs }}"
    else:


# Using group commands to push updates to ALL plates !
# Remember plates have to share same object mapping (page/object number)
# Color code for button toggle value 'on' not set as static in jsonl on purpose.
# This in order NOT to change color immediately on button press, but instead wait for attribute change to 'playing'
- id: openhasp_sonos_set_play/pause/idle_icon
  alias: openHASP Sonos set play/pause/idle icon
  mode: parallel
  trigger:
  - platform: state
    # Dynamic entity_id trigger - Sonos master speaker state 
    entity_id:
    - sensor.hasp_sonos_master_state
    to:
    - playing
    - paused
    - idle
  action:  
    service: mqtt.publish
    data:
      topic: hasp/plates/command/jsonl
      payload_template: >-
        {% if trigger.to_state.state == 'paused' %}
          {"page":2,"id":17,"val":0,"text":"\ue40a"}
        {% elif trigger.to_state.state == 'playing' %}
          {"page":2,"id":17,"val":1,"text":"#FFAC00 \ue3e4#"}
        {% else %}
          {"page":2,"id":17,"val":0,"text":"\ue4db"}
        {% endif %}


# Every five seconds - Push media_duration to plates when playing
# Don't push update for Sonos sources (radio stations) - check for media_position attribute presence
# When paused, CC will get exact update from HA's media player state changes and update plate
- id: openhasp_update_media_duration
  alias: openHASP update media duration
  mode: single
  trigger:
    platform: time_pattern
    seconds: '/5'
  condition:
    condition: and
    conditions:
    - condition: state
      # Dynamic entity_id condition - Sonos master speaker state 
      entity_id: sensor.hasp_sonos_master_state
      state: 'playing
  action:
    service: mqtt.publish
    data_template:
      topic: hasp/plates/command/p2b41.val
      payload: >-
          {{ (as_timestamp(now()) - as_timestamp(state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'media_position_updated_at'))) | round(0) + (state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'media_position')) | int(0) }}


# Listen for changes from ALL plates (+ in topic)  !
# Remember plates have to share same object mapping (page/object number)
# Only change for sources (radio stations) - not for playlists
# 190822: Revised to use new sensor.sonos_favorites as source_list attribute has been deprecated
- id: openhasp_sonos_next_source
  alias: openHASP Sonos next source
  mode: single
  trigger:
    platform: mqtt
    topic: hasp/+/state/p2b18
    payload: '{"event":"down"}'
  condition:
    - condition: template
      value_template: "{{ states('sensor.media_source') != 'no source' }}"
  action:
  - service: media_player.select_source
    data_template:
      entity_id: "{{ state_attr('group.sonos_all', 'entity_id')[0] }}"
      source: >-
        {% set source_start = states('sensor.sonos_source_index_start') | int(0) %}
        {% set entity_id = state_attr('group.sonos_all', 'entity_id')[0] %}
        {% set current = states('sensor.media_source') %}
        {% set source_list = state_attr('sensor.sonos_favorites', 'items').values() | list %}
        {% set index = source_list.index(current) %}
        {% set next = source_start if current == source_list[-1] else index + 1 %}        
        {{ source_list[next] }}
  # Update Sources dropdown start position value on all plates, if source is changed through next/previous buttons
  - service: mqtt.publish
    data_template:
      topic: hasp/plates/command/p2b99.val
      payload: >-
        {% set source_start = states('sensor.sonos_source_index_start') | int(0) %}
        {% set entity_id = state_attr('group.sonos_all', 'entity_id')[0] %}
        {% set current = states('sensor.media_source') %}
        {% set source_list = state_attr('sensor.sonos_favorites', 'items').values() | list %}
        {% set index = source_list.index(current) %}
        {% set pos = source_start if current == source_list[-1] else index + 1 %}        
        {{ pos - source_start - 1 }}    


# Listen for changes from ALL plates (+ in topic)  !
# Remember plates have to share same object mapping (page/object number)
# Only change for sources (radio stations) - not for playlists
# 190822: Revised to use new sensor.sonos_favorites as source_list attribute has been deprecated
- id: openhasp_sonos_prev_source
  alias: openHASP Sonos previous source
  mode: single
  trigger:
    platform: mqtt
    topic: hasp/+/state/p2b16
    payload: '{"event":"down"}'
  condition:
    - condition: template
      value_template: "{{ states('sensor.media_source') != 'no source' }}"
  action:
  - service: media_player.select_source
    data_template:
      entity_id: "{{ state_attr('group.sonos_all', 'entity_id')[0] }}"
      source: >-
        {% set source_start = states('sensor.sonos_source_index_start') | int(0) %}
        {% set entity_id = state_attr('group.sonos_all', 'entity_id')[0] %}
        {% set current = states('sensor.media_source') %}
        {% set source_list = state_attr('sensor.sonos_favorites', 'items').values() | list %}
        {% set index = source_list.index(current) %}
        {% set prev = -1 if current == source_list[source_start] else index - 1 %}
        {{ source_list[prev] }}
  # Update Sources dropdown start position value on all plates, if source is changed through next/previous buttons
  - service: mqtt.publish
    data_template:
      topic: hasp/plates/command/p2b99.val
      payload: >-
        {% set source_start = states('sensor.sonos_source_index_start') | int(0) %}
        {% set entity_id = state_attr('group.sonos_all', 'entity_id')[0] %}
        {% set current = states('sensor.media_source') %}
        {% set source_list = state_attr('sensor.sonos_favorites', 'items').values() | list %}
        {% set index = source_list.index(current) %}
        {% set pos = source_start if current == source_list[-1] else index + 1 %}        
        {{ pos - source_start - 1 }}    


# Next/previous track - Only change for playlists - not for sources (radio stations)
- id: openhasp_sonos_next_previous_track
  alias: openHASP Sonos next/previous track
  mode: single
  trigger:
    - platform: mqtt
      topic: hasp/+/state/p2b16
      payload: '{"event":"down"}'
    - platform: mqtt
      topic: hasp/+/state/p2b18
      payload: '{"event":"down"}'
  condition:
    - condition: template
      value_template: "{{ states('sensor.media_source') == 'no source' }}"
  action:
    service_template: >-
      {{ 'media_player.media_previous_track' if trigger.topic.split('/')[3] == 'p2b16' else 'media_player.media_next_track' }} 
    data:
      entity_id: "{{ state_attr('group.sonos_all', 'entity_id')[0] }}"


# Dynamic support for both 320, 480 and 800 pixel width devices
# Target entity_id is now also dynamic and templated.
# Zoom service removed as push_image now supports upscaling of images if fitscreen argument is set in data field
- id: openhasp_push_image_to_plate
  alias: openHASP push image to plate
  mode: restart
  trigger:
    - platform: state
      entity_id: sensor.hasp_sonos_master_image
      # Delay needed in order to remove some of the double images pushed to the plates (source still often generates 2 images though)
      for:
        milliseconds: 250
    - platform: homeassistant
      event: start
    - platform: state
      # Enter all used openHASP plates entity_id's here 
      entity_id:
        #- openhasp.wt32_01
        #- openhasp.wt32_02
        - openhasp.t3e_02
      from: unavailable
  condition:
    - condition: template
      value_template: "{{ state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'entity_picture') != None }}"
    # Push images for each openHASP entity in group.hasp_sonos_devices
    # with dynamic width/height from each device sensors tftWidth attribute
    # using local HA IP address from HA integration - Internal IP
    # Automation now supports full dynamic mix of different image sizes
    # Width/height for Sunton 7" device is set to 355
    # Image width/height for all other devices will be identical with device width
  action:
  - repeat:
      for_each: >
        {{ state_attr("group.hasp_sonos_devices", "entity_id") | list }}
      sequence:
        - variables:
            w: "{{ state_attr((repeat.item), 'tftWidth') }}"
        - service: openhasp.push_image
          data:
            obj: p2b40
            image: "http://{{states('sensor.local_ip')}}:8123{{state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'entity_picture')}}"
            fitscreen: 1
            width: >
              {% if w == 800 %}
                355
              {% else %}
                {{ w }}
              {% endif %}
            height: >
              {% if w == 800 %}
                355
              {% else %}
                {{ w }}
              {% endif %}
          target:
            entity_id: >
              {{ repeat.item }}
              
              
# Open tabs, push source dropdown list to a specific plate and show active speakers on all plates
# Issue hidden:0 command to the specific plate only that triggered event 
# Starts on first tab every time opened for all plates.
# Trigger on both image and underlying object (if no image is loaded to plate)
- id: openhasp_sonos_source_list
  alias: openHASP Sonos source list
  mode: single
  trigger:
    - platform: mqtt
      topic: hasp/+/state/p2b40
      payload: '{"event":"release"}'
    - platform: mqtt
      topic: hasp/+/state/p2b39
      payload: '{"event":"release"}'
  action:
  - service: mqtt.publish
    data:
      topic: "hasp/{{trigger.topic.split('/')[1]}}/command/jsonl"
      payload: "{'page':2,'id':95,'to_front':1,'hidden':0,'val':0}"
  - service: mqtt.publish
    data:
      topic: "hasp/{{trigger.topic.split('/')[1]}}/command/jsonl"
      payload: "{'page':2,'id':22,'hidden':1}{'page':2,'id':15,'hidden':1}{'page':2,'id':23,'hidden':0}{'page':2,'id':26,'hidden':0}"
  
  # TEMP NEEDED DELAY AS OPENHASP HAS ISSUES UNHIDING PARENT TAB AND OPENING DROPDOWN MENU RIGHT AFTER !
  - delay:
      milliseconds: 250
  # TEMP NEEDED DELAY AS OPENHASP HAS ISSUES UNHIDING PARENT TAB AND OPENING DROPDOWN MENU RIGHT AFTER !
  
  - service: mqtt.publish
    data:
      topic: >-
        hasp/{{trigger.topic.split('/')[1]}}/command
      payload: >-
        {"page":2,"id":99,"open":1}

      
# Only applicable for the plate doing the change - NOT all plates
- id: openhasp_sonos_source_list_change
  alias: openHASP Sonos source list change
  mode: single
  trigger:
    - platform: mqtt
      topic: hasp/+/state/p2b95
  condition:
  - condition: template
    value_template: "{{ trigger.payload_json.event == 'changed' }}"
  action:
  - service: mqtt.publish
    data:
      topic: >-
        hasp/{{trigger.topic.split('/')[1]}}/command
      payload: >-
        {% if trigger.payload_json.val == 2 %}
          {"page":2,"id":98,"close":1}{"page":2,"id":99,"close":1}
        {% elif trigger.payload_json.val == 0 %}
          {"page":2,"id":98,"close":1}
        {% else %}
          {"page":2,"id":99,"close":1}
        {% endif %}

  # TEMP NEEDED DELAY AS OPENHASP HAS ISSUES UNHIDING PARENT TAB AND OPENING DROPDOWN MENU RIGHT AFTER !
  - delay:
      milliseconds: 250
  # TEMP NEEDED DELAY AS OPENHASP HAS ISSUES UNHIDING PARENT TAB AND OPENING DROPDOWN MENU RIGHT AFTER !

  - service: mqtt.publish
    data:
      topic: >-
        hasp/{{trigger.topic.split('/')[1]}}/command
      payload: >-
        {% if trigger.payload_json.val == 2 %}
          {"page":2,"id":99,"close":1}
        {% elif trigger.payload_json.val == 0 %}
          {"page":2,"id":99,"open":1}
        {% else %}
          {"page":2,"id":98,"open":1}
        {% endif %}
